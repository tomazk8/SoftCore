+ IoC and DI container
+ Attribute-based class registration
+ over private field only (Export, Import, ImprotMany), string contracts can be customized
+ Lifetime (Shared, NonShared, custom)
+ Lazy resolving
+ ExportFactory
+ Catalogs (Application, Assembly, Type, Aggregate, ExplicitInstance, Filter)
+ Floating parts - using special attribute
+ IEntryPoint
+ Constructor parameter injection - only over ExportFactory
+ AOP (interception on interfaces using proxy)
	Access control
	logging
	recording
Export structure for diagram
+ Load-time measurement
Pre runtime checks
	+ Exports found for imports
	UI WPF controls must not be shared - not possible in WPF-independant version
	check referenced assemblies
	+ ExportFactory only used on NotShared parts
	+ parts must have only one private constructor
+ .NET standard
Areas, (contexts)


TODO:
- Areas
	- Maybe run in isolation (AppDomain or Process)
- Typed exceptions should be thrown, not generic ones. Or maybe at least one typed exception for whole library, i.e. CompositionException.
- Licensing. LicencedExport attribute, with GUID maybe.
- Cyclic import check
- Activity recording
- Make automatic unit tests based on recorded data
- Testing
	+ ReplacementPart
	- ImportOriginal from replacement export
- Performance profiling
	- Measure part processing time
	+ Measure part init time
- Statistics
	- Call event when part is taken from catalog
	- Call event when part init starts and when it ends
- Interface bridging
- Other lifestyles
	- Context (Web request, thread,...)
- Auto multi threading and horizontal scaling or parts. Make copies, one per Thread. Do load balancing.
- Backgroung part creaation - singletons only. Creates parts before they are used.
- Disposable parts?
- Manual wiring
- Shutdown event - parts can do cleanup when application or area is shut down.
- Export all types in an inheritance tree along with all implemented interfaces
- Limit added features only to some customers. This would be to test new functionality at limited customers.