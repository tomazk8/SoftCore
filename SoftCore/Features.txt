+ IoC and DI container
+ Attribute-based class registration
+ over private field only (Export, Import, ImprotMany), string contracts can be customized
+ Lifetime (Shared, NonShared, custom)
+ Lazy resolving
+ ExportFactory
+ Catalogs (Application, Assembly, Type, Aggregate, ExplicitInstance, Filter)
+ Floating parts - using special attribute
+ IEntryPoint
+ Constructor parameter injection - only over ExportFactory
+ Add ExportType property to ExportFactory, so when importing a list of base classes, importer can differentiate between types.
AOP (interception on interfaces using proxy)
	+ Infrastructure
	+ Access control (example as unit test)
	+ logging/recording (example as unit test)
	Make automatic unit tests based on recorded data
+ Load-time measurement
Pre runtime checks
	+ Exports found for imports
	UI WPF controls must not be shared - not possible in WPF-independant version.
	check referenced assemblies
	+ ExportFactory only used on NotShared parts
	+ parts must have only one private constructor
	+ prevent cyclic importing (cyclic dependency)
	+ If class has parametered constructor, check that ExportFactory is used and that ExportFactory parameters match
+ .NET standard
Areas, (contexts)
Shutdown event - parts can cleanup when application or area is shut down. Maybe IDisposable could be used for this and would be called at the end when application stops.
Performance profiling
	Measure part processing time
	+ Measure part init time
Testing
	+ ReplacementPart
	ImportOriginal from replacement export
Typed exceptions should be thrown, not generic ones. Or maybe at least one typed exception for whole library, i.e. CompositionException.
Licensing
	+ LicencedExport or normal export with i.e. LicensedPart attribute? A new catalog is also needed to perform filtering.
	+ Licence parameters. Part will in some way get these parameters. The best way is probably to inject them into the field.
Events
	Event when part is retrived from catalog
	Event when part init starts and when it ends
+ Interface bridging
Other lifestyles
	Context (Web request, thread,...)
Auto multi threading and horizontal scaling of parts. Make copies, one per Thread. Do load balancing.
Background part creation - singletons only. Creates parts before they are used.
Disposable parts?
Manual wiring?
Export all types in an inheritance tree along with all implemented interfaces
Limit added features only to some customers. This would be to test new functionality at limited customers.